[{"title":"F12调试技巧","url":"http://yoursite.com/2016/12/29/F12调试技巧/","content":"<h1 id=\"1-常规\"><a href=\"#1-常规\" class=\"headerlink\" title=\"1.常规\"></a>1.常规</h1><h2 id=\"1-1-快捷键\"><a href=\"#1-1-快捷键\" class=\"headerlink\" title=\"1.1 快捷键\"></a>1.1 快捷键</h2><ul>\n<li>“F12”(windows)</li>\n<li>“Cmd”⌘ +“Option” +“I”（Mac）</li>\n<li>右键选择“Inspect Element 检查元素”</li>\n<li>Safari 需要在 首选项 &gt; 高级 &gt; 显示开发菜单，启用开发工具</li>\n<li>Firebug 是 Firefox 扩展</li>\n</ul>\n<h2 id=\"1-2-使用最新的开发版本浏览器\"><a href=\"#1-2-使用最新的开发版本浏览器\" class=\"headerlink\" title=\"1.2 使用最新的开发版本浏览器\"></a>1.2 使用最新的开发版本浏览器</h2><ol>\n<li><p>chrome Canary<br> <a href=\"https://www.google.com/intl/zh-CN/chrome/browser/canary.html\" target=\"_blank\" rel=\"external\">Chrome Canary</a> 是 Chrome 实验版，Canary 和 Chrome 可以同时安装。<br> 你可以通过 chrome://flags 进一步加强你的 Chrome 开发工具 ，启用“Enable Developer Tools experiments （启用开发工具实验）”。</p>\n<p> <img src=\"http://oixxlw0bj.bkt.clouddn.com/1479800206890.jpg\" alt=\"image\"></p>\n</li>\n<li><p>Firefox Aurora<br> <a href=\"http://www.mozilla.org/en-US/firefox/aurora/\" target=\"_blank\" rel=\"external\">Firefox Aurora</a> 提供 Firefox 最新特性预览。Aurora 不能和 Firefox 同时打开。</p>\n<p><img src=\"http://oixxlw0bj.bkt.clouddn.com/1479800391545.jpg\" alt=\"image\"></p>\n</li>\n<li><p>Webkit Nightly<br>  Webkit Nightly 可以和 Safari 同时运行。</p>\n<p> <img src=\"http://oixxlw0bj.bkt.clouddn.com/1479800523683.jpg\" alt=\"image\"></p>\n</li>\n<li><p>Opera Next 是 Opera 最新改良版，会提供一些新的功能和特性。</p>\n<p> <img src=\"http://oixxlw0bj.bkt.clouddn.com/1479800536638.jpg\" alt=\"image\"></p>\n</li>\n</ol>\n<h2 id=\"1-3-移动开发工具位置\"><a href=\"#1-3-移动开发工具位置\" class=\"headerlink\" title=\"1.3 移动开发工具位置\"></a>1.3 移动开发工具位置</h2><p> Chrome 开发工具，左下角图标允许改变停靠设置。快速点击它，会在底部和右侧切换。长按可以选择停靠选项（独立窗口打开），你也可以点击并拖拽移动开发工具。</p>\n<p>Firefox 和 Safari 开发工具，停靠选项在右上角临近关闭按钮的位置，可以新窗口打开。</p>\n<p>要改变停靠位置，可点击左上角小虫子，选择 Firebug 界面位置（上/下/左/右）。Firebug 右上角可以快速选择：最小化，新窗口，关闭。</p>\n<h1 id=\"2-console-控制台\"><a href=\"#2-console-控制台\" class=\"headerlink\" title=\"2 console 控制台\"></a>2 console 控制台</h1><h1 id=\"2-1-log-info-Debug-Warn-Error\"><a href=\"#2-1-log-info-Debug-Warn-Error\" class=\"headerlink\" title=\"2.1 log, info, Debug, Warn , Error\"></a>2.1 log, info, Debug, Warn , Error</h1><p>console.log()是每个前端用得最多的调试代码。<br>一般使用都是直接用，其实他还是可以这么用：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(<span class=\"string\">\"%s is %d years old.\"</span>, <span class=\"string\">\"Bob\"</span>, <span class=\"number\">42</span>)</div></pre></td></tr></table></figure>\n<p>是不是很熟悉，跟曾经学过的C语言打印日志一样一样的。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log(\"%cThis is green text on a yellow background.\", \"color:green; background-color:yellow\");</div></pre></td></tr></table></figure>\n<p>上面代码是%c 模式，把第二个变量作为样式格式参数。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log('Kings: ', kings);</div></pre></td></tr></table></figure>\n<p>可以输入多个值，用逗号隔开即可，方便在同一行输出对象和数组</p>\n<p>console.info() 输出提示信息；console.debug() 输出调试信息；console.warn() 输出警示信息；console.error() 输出错误信息</p>\n<h2 id=\"2-2-输入表格-console-table\"><a href=\"#2-2-输入表格-console-table\" class=\"headerlink\" title=\"2.2 输入表格 console.table\"></a>2.2 输入表格 console.table</h2><p>console.table() 可以用来输出数组或者对象列表，以一种合适的表格形式显示。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.table([[<span class=\"number\">10</span>, true, <span class=\"string\">\"blue\"</span>],[<span class=\"number\">5</span>, false]])</div></pre></td></tr></table></figure>\n<p> 输入如下的格式：</p>\n<p> <img src=\"http://oixxlw0bj.bkt.clouddn.com/1479801889947.jpg\" alt=\"image\"></p>\n<p>还可以自定义列名，属性名必须是对象中指定元素</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.table(&#123;</div><div class=\"line\">\t<span class=\"string\">\"London\"</span>:&#123;population:<span class=\"number\">8173194</span>, country:<span class=\"string\">\"UK\"</span>, elevation:<span class=\"string\">\"24m\"</span>&#125;,</div><div class=\"line\">\t<span class=\"string\">\"New York\"</span>:&#123;population:<span class=\"number\">8336697</span>, country:<span class=\"string\">\"USA\"</span>, elevation:<span class=\"string\">\"10m\"</span>&#125;&#125;,</div><div class=\"line\">\t[<span class=\"string\">\"population\"</span>, <span class=\"string\">\"country\"</span>])</div></pre></td></tr></table></figure>\n<p>第二个可选的变量允许你明确指定哪一列要输出</p>\n<p> <img src=\"http://oixxlw0bj.bkt.clouddn.com/1479802610952.jpg\" alt=\"image\"></p>\n<h2 id=\"2-3-console-Assert\"><a href=\"#2-3-console-Assert\" class=\"headerlink\" title=\"2.3 console.Assert()\"></a>2.3 console.Assert()</h2><p>  断言用于测试表达式真假</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.assert(!true, 'This is not true')；//输出”This is not true</div><div class=\"line\">console.assert(true, 'This is not true'); //什么也不输出</div></pre></td></tr></table></figure>\n<h2 id=\"2-4-持久控制台\"><a href=\"#2-4-持久控制台\" class=\"headerlink\" title=\"2.4 持久控制台\"></a>2.4 持久控制台</h2><p>有时页面加载时，你需要保留控制台信息。有时在点击或离开页面时，我们需要这个作为参考或者用来查看日志。</p>\n<p>在 Chrome 里，显示菜单里有“Preserve Log”，选择它将保存你的控制台内容。</p>\n<p><img src=\"http://oixxlw0bj.bkt.clouddn.com/1479803432279.jpg\" alt=\"image\"></p>\n<p>Firefox 默认会保存控制台信息。你可以点击右上角“清除”按钮清除控制台日志，或者打开/关闭工具。</p>\n<p>在 Firebug 里，有个显著的按钮用来保持控制台内容，就在控制台的上部。</p>\n<p>Opera 默认保存控制台内容，你可以右键选择“clear console”清除控制台日志或者重开工具。</p>\n<h2 id=\"2-5-任意tab打开console\"><a href=\"#2-5-任意tab打开console\" class=\"headerlink\" title=\"2.5 任意tab打开console\"></a>2.5 任意tab打开console</h2><p>在 Chrome ，尽管控制台有自己的 tab ，在任意 tab 按下“ESC”键即可打开控制台，因此不必切换 tab 了。</p>\n<p>Safari 控制台在开发工具的底部，“ESC”键用来切换控制台日志的可见性。在命令行执行一个命令也将打开控制台日志。</p>\n<p>在 Firefox ，快速切换到控制台：“Ctrl + Shift + K ”（Windows），“Cmd ⌘ + Option ⌥ + K ”（Mac）。    </p>\n<h2 id=\"2-6-引用当前和前一个元素\"><a href=\"#2-6-引用当前和前一个元素\" class=\"headerlink\" title=\"2.6 引用当前和前一个元素\"></a>2.6 引用当前和前一个元素</h2><p>如果你的“Elements”标签选择了一个元素，你可以用 $0 调用它。输入 $0.innerHTML 试试看。</p>\n<p>在 Firebug 和 Opera，你可以用 $1 选择前一个元素。</p>\n<p>在 Chrome 和 Safari，你可以通过 $1 - $4 选择更靠前的元素。</p>\n<p>在 Firebug ，你可以通过 $n(2) - $n(5) 选择更靠前的元素。</p>\n<h1 id=\"3-编辑\"><a href=\"#3-编辑\" class=\"headerlink\" title=\"3 编辑\"></a>3 编辑</h1><h2 id=\"3-1-搜索DOM节点\"><a href=\"#3-1-搜索DOM节点\" class=\"headerlink\" title=\"3.1 搜索DOM节点\"></a>3.1 搜索DOM节点</h2><p> 在 Chrome ，你可以按 Ctrl-F 打开对话框，CSS 选择器如期工作</p>\n<p><img src=\"http://oixxlw0bj.bkt.clouddn.com/1479803976290.jpg\" alt=\"image\"></p>\n<h2 id=\"3-2-修改CSS值\"><a href=\"#3-2-修改CSS值\" class=\"headerlink\" title=\"3.2 修改CSS值\"></a>3.2 修改CSS值</h2><p> 如果有个元素需要修改 margin，padding，width 或者 height，可以使用方向键增加/减少尺寸。简单使用上下方向键增加/减少1个单位。<br> “Shift” + 上下方向键，可以增加/减少10个单位；“Alt” + 上下方向键，可以增加/减少0.1个单位。<br> “Shift” + Page-Up / Page-Down，可以增加/减少100个单位。</p>\n<h2 id=\"3-3-改变-active，-hover，-focus，-visited-状态样式\"><a href=\"#3-3-改变-active，-hover，-focus，-visited-状态样式\" class=\"headerlink\" title=\"3.3 改变 :active， :hover， :focus， :visited 状态样式\"></a>3.3 改变 :active， :hover， :focus， :visited 状态样式</h2><p>在开发工具里修改 CSS 非常爽，但是碰到 hover 之类的伪类就有点挠头了。</p>\n<p>Chrome 有个按钮是干这用的，在“Elements”标签右手边看到一个虚线框和光标在一起的图标，它可以切换其它状态。</p>\n<p><img src=\"http://oixxlw0bj.bkt.clouddn.com/1479804330440.jpg\" alt=\"image\"></p>\n<h1 id=\"4-调试\"><a href=\"#4-调试\" class=\"headerlink\" title=\"4 调试\"></a>4 调试</h1><h2 id=\"4-1-用debugger\"><a href=\"#4-1-用debugger\" class=\"headerlink\" title=\"4.1 用debugger\"></a>4.1 用debugger</h2><p>添加此行代码：debugger; 可以自动创建断点，当开发工具打开时运行，断点会自动创建。</p>\n<p>尽管快速添加断点很方便，不用在开发工具一行一行找，小心不要把 debugger; 提交到线上环境。</p>\n<h2 id=\"4-2-条件断点\"><a href=\"#4-2-条件断点\" class=\"headerlink\" title=\"4.2 条件断点\"></a>4.2 条件断点</h2><p>不必每次生效时，条件断点很有用。例如，你知道你的代码在最后一项有 bug，你可以用条件判断在最后一项时激活 debugger。条件满足，断点触发。</p>\n<p>在 Chrome 中创建条件断点，先创建个正常的断点，然后右击断点选择“编辑断点”添加条件。</p>\n<p>在 Firebug ，先创建常规断点，然后右击出现输入框，可以添加条件。</p>\n<p>在 Firefox ，右击想创建断点的行，选择“增加条件断点”。</p>\n<p>在 IE，先创建常规断点，然后右击断点，选择“条件…”。</p>\n<p>在 Opera，先创建常规断点，然后右击断点，选择“添加条件”。</p>\n<p>在 Safari，确保脚本和“调试器”面板都打开，创建一个断点，然后在“调试器”面板右击同样的断点，选择“编辑断点”。</p>\n<h2 id=\"4-3-DOM断点\"><a href=\"#4-3-DOM断点\" class=\"headerlink\" title=\"4.3 DOM断点\"></a>4.3 DOM断点</h2><p>如果特定的 DOM 改变，你的页面会被破坏，或者你只想找出元素属性或子元素改变，哪些代码生效，Chrome 和 Firebug 均可以在 DOM 修改时设置断点，你可以找到代码问题的根源。简单点击你想监控的元素，右击选择“break on”选项。</p>\n<h2 id=\"4-4-XHR断点\"><a href=\"#4-4-XHR断点\" class=\"headerlink\" title=\"4.4 XHR断点\"></a>4.4 XHR断点</h2><p>在 Chrome ，可以为 XmlHttpRequest 设置断点，你可以调试 AJAX 请求。到“Sources”标签选择“XHR 断点”，点击右侧加号图标，输入部分或所有你想添加断点的 URL 。一旦请求返回，断点将生效，你可以看到返回的数据，并可单步调试后续操作。</p>\n<p>取消勾选可以关掉断点，右键选择“Delete Breakpoint 删除断点”删除断点。</p>\n<p>在 Firebug ，到网络标签选择“在 XHR 时中断”按钮，或者右键选择“在 XHR 时中断”，你也可以随意选择中断条件。</p>\n<h2 id=\"4-5调试压缩后的JavaScript\"><a href=\"#4-5调试压缩后的JavaScript\" class=\"headerlink\" title=\"4.5调试压缩后的JavaScript\"></a>4.5调试压缩后的JavaScript</h2><p>下断点让 JavaScript 调试更容易，但是如果代码已经放到生成环境，很可能已被压缩。如何调试最小化的代码呢？庆幸的是一些浏览器已经支持解压你的 JavaScript 。</p>\n<p>在 Chrome 和 Safari ，选择“脚本”标签，找到相应的文件，然后点击“{}”图标（pretty print，在面板底部）。</p>\n<p>在 IE ，点击工具图标选择下拉菜单，找到格式化 JavaScript 选项。</p>\n<p>Opera 自动格式化压缩的 JavaScript 。</p>\n<h2 id=\"4-6-使用-JavaScript-Source-Maps\"><a href=\"#4-6-使用-JavaScript-Source-Maps\" class=\"headerlink\" title=\"4.6 使用 JavaScript Source Maps\"></a>4.6 使用 JavaScript Source Maps</h2><p>当我们部署代码到生产环境时，比较明智的是压缩代码减少加载时间。压缩去除了无用的字符（比如注释），空行和空格。可是压缩后很难调试，无法单步调试，代码不易读。JavaScript source maps 调试压缩后 JavaScript 文件非常有用，它提供一个映射关联到未压缩文件。</p>\n<p>在 Chrome 开发工具，，“Settings 设置”菜单 -&gt; “General 常规”标签，激活“Enable Source Maps 启用 Source Maps ”。有兴趣的可以去google研究一番。</p>\n<h2 id=\"4-7-模拟User-Agent\"><a href=\"#4-7-模拟User-Agent\" class=\"headerlink\" title=\"4.7 模拟User Agent\"></a>4.7 模拟User Agent</h2><p>   安装 user-agent switcher 即可</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/category/extensions?hl=zh-CN\" target=\"_blank\" rel=\"external\">https://chrome.google.com/webstore/category/extensions?hl=zh-CN</a>  chrome打开这个网址</li>\n<li>打开商店网址，输入  user-agent switcher </li>\n</ul>\n<p><img src=\"http://oixxlw0bj.bkt.clouddn.com/1479808437884.jpg\" alt=\"image\"></p>\n<ul>\n<li>安装完成后，会在右上角显示一个插件ICO，直接点击使用</li>\n</ul>\n<p><img src=\"http://oixxlw0bj.bkt.clouddn.com/1479808512645.jpg\" alt=\"image\"></p>\n<h2 id=\"4-8-运行代码片段\"><a href=\"#4-8-运行代码片段\" class=\"headerlink\" title=\"4.8 运行代码片段\"></a>4.8 运行代码片段</h2><p>   在“Source”标签，“Sources”和“Content scripts”后面有个“Snippets ”标签，右键点击空区域，点“New”创建新的片段，写入一些代码，无论何时再想运行它时，右键点击选择“Run 运行”即可。</p>\n<p>  <img src=\"http://oixxlw0bj.bkt.clouddn.com/1479809359489.jpg\" alt=\"image\"></p>\n<h1 id=\"5-移动端\"><a href=\"#5-移动端\" class=\"headerlink\" title=\"5 移动端\"></a>5 移动端</h1><h2 id=\"5-1-开发工具IOS\"><a href=\"#5-1-开发工具IOS\" class=\"headerlink\" title=\"5.1 开发工具IOS\"></a>5.1 开发工具IOS</h2><p>把 IOS 设备连接到可用的 Mac，打开 Mac 和 IOS 设备的 Safari 。</p>\n<p>找到 Safari 的“Develop 开发”菜单，第一个菜单分隔线的后面应该是你要连接的 IOS 设备的名字。在子菜单选择你想调试的页面。</p>\n<p>Safari 的开发工具将以弹出窗口的式出现，你可以调试移动设备的站点了。</p>\n<h2 id=\"5-2-开发工具Android\"><a href=\"#5-2-开发工具Android\" class=\"headerlink\" title=\"5.2 开发工具Android\"></a>5.2 开发工具Android</h2><p>用USB线连接手机和电脑，然后在chrome浏览器中去找到手机。<br>在电脑上的chrome浏览器中，导航到chrome://inspect，确认 Discover USB devices 是选中状态，并且可以看到已经发现我的安卓手机</p>\n","categories":[],"tags":["F12"]},{"title":"git 使用心得","url":"http://yoursite.com/2016/08/03/git使用心得/","content":"<h3 id=\"1-安装Git\"><a href=\"#1-安装Git\" class=\"headerlink\" title=\"1.安装Git\"></a>1.安装Git</h3><p>Git之前是在linux上开发的，所以很长一段时间只能在linux上跑，现在也有了Windows版本的Git。</p>\n<p><strong>在Linux上安装Git</strong><br>首先，你可以试着输入git，看看系统有没有安装Git：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git</div><div class=\"line\">The program <span class=\"string\">'git'</span> is currently not installed. You can install it by typing:</div><div class=\"line\">sudo apt-get install git</div></pre></td></tr></table></figure></p>\n<p>上面代码即是没有安装以及如何安装的意思。<br>Ubuntu linux或者debain，命令如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install git</div></pre></td></tr></table></figure>\n<p>如果是其他Linux版本，可以直接通过源码安装。先从Git官网下载源码，然后解压，依次输入：./config，make，sudo make install这几个命令安装就好了。<br><strong>在Mac OS X上安装Git</strong></p>\n<p>Mac os X上有两种方式，如下：</p>\n<ol>\n<li>homebrew，安装homebrew，然后通过homebrew一键搞定，具体参考文档：<a href=\"http://brew.sh/\" target=\"_blank\" rel=\"external\">http://brew.sh/</a></li>\n<li>第二种简单，直接从AppStore安装Xcode，Xcode集成了GIt，不过默认没装，你需要运行Xcode，菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。xcode是免费的，功能相当强大。</li>\n</ol>\n<p><strong>在Mac OS X上安装Git</strong><br>本人不喜欢用Windows开发，如果不是情势所逼，不推荐windows作为开发环境。windows下安装的话，直接到官网下载 <a href=\"https://git-for-windows.github.io\" target=\"_blank\" rel=\"external\">https://git-for-windows.github.io</a> 下载，然后默认安装即可。安装完成后，使用Git-&gt;Git Bash，跳出一个命令行窗口，说明安装成功。</p>\n<p>安装完成，还需要配置，在命令行输入：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"Your Name\"</span></div><div class=\"line\">$ git config --global user.email <span class=\"string\">\"email@example.com\"</span></div></pre></td></tr></table></figure></p>\n<p>注意git config命令的–global参数，使用这个菜蔬，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>\n<p>未完待续</p>\n","categories":[],"tags":[]},{"title":"http请求缓存机制","url":"http://yoursite.com/2016/08/01/http请求缓存机制/","content":"<hr>\n<blockquote>\n<p>摘要：在前端开发过程中，我们可能会经常遇到浏览器缓存的问题。本文详细介绍浏览器缓存机制，帮助读者更深层次的理解浏览器缓存。</p>\n</blockquote>\n<p>Cache</p>\n","categories":[],"tags":[]},{"title":"使用Ubuntu 新建vpn过程","url":"http://yoursite.com/2016/07/31/使用Ubuntu新建vpn过程/","content":"<p>1、更新软件源<br>     sudo apt-get update</p>\n<p>2、安装pip<br>   sudo apt-get install python-pip</p>\n<p>3、安装shadowsocks<br>   sudo pip install shadowsocks</p>\n<p>4、运行shadowsocks<br>   sudo ssserver -p 8388 -k  password -m aes-256-cfb -d start</p>\n<p>  #ssserver -p 服务器端口 -k 密码 -m 加密方法 -m  加密协议  -d 后台运行</p>\n<p>5、停止运行<br>     sudo ssserver  -d  stop</p>\n<p>   #查询日志<br>   sudo less/more /var/log/shadowsocks.log<br>   sudo tail -f  /var/log/shadowsocks.log</p>\n<p>6、下载shadowsocks地址：<br>       <a href=\"http://www.ishadowsocks.org/\" target=\"_blank\" rel=\"external\">http://www.ishadowsocks.org/</a></p>\n<p>7、digitalocean官网：<br>     <a href=\"https://m.do.co/c/c038014ec8a1\" target=\"_blank\" rel=\"external\">https://m.do.co/c/c038014ec8a1</a>   通过此链接可以免费领取10美元费用，相当于免费使用2个月的vps，亲测可用</p>\n","categories":[],"tags":[]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"<p>link:</p>\n<ul>\n<li>name: 三省吾身丶丶<br>info: 芝兰生于深林，不以无人而不芳<br>url: <a href=\"http://blog.guowenfh.com/\" target=\"_blank\" rel=\"external\">http://blog.guowenfh.com/</a><br>avatar: <a href=\"http://blog.guowenfh.com/images/guowenfh.jpg\" target=\"_blank\" rel=\"external\">http://blog.guowenfh.com/images/guowenfh.jpg</a></li>\n</ul>\n","categories":[],"tags":[]},{"title":"project","url":"http://yoursite.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]}]